// server.js - Alphine AI ACA Gateway with Twilio -> Google STT bridge

require("dotenv").config();
const express = require("express");
const http = require("http");
const WebSocket = require("ws");
const bodyParser = require("body-parser");

const { attachGoogleStream } = require("./ws");

const APP_PORT = process.env.APP_PORT || 8080;
const WS_SHARED_SECRET = process.env.WS_SHARED_SECRET || "changeme";
const NGROK_HOST = process.env.NGROK_HOST || "localhost";

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));

app.post("/twilio/voice", (req, res) => {
  console.log("📞 Incoming Twilio call → generating TwiML");

  const twiml = `
    <Response>
      <Connect>
        <Stream url="wss://${NGROK_HOST}/media-stream?secret=${WS_SHARED_SECRET}"
                track="inbound_track" />
      </Connect>
    </Response>
  `;

  res.set("Content-Type", "text/xml");
  res.send(twiml);
});

const server = http.createServer(app);
const wss = new WebSocket.Server({ server, path: "/media-stream" });

wss.on("connection", (ws, req) => {
  const url = req.url || "";
  const urlParams = new URLSearchParams(url.replace("/media-stream?", ""));
  const secret = urlParams.get("secret");

  const allowInsecure = (process.env.ALLOW_INSECURE || "false").toLowerCase() === "true";

  if (!allowInsecure) {
    if (secret !== WS_SHARED_SECRET) {
      console.warn("⚠️ Secret mismatch!");
      ws.close();
      return;
    }
  } else {
    if (!secret) {
      console.warn("⚠️ ALLOW_INSECURE is true and no secret was provided. Accepting connection for testing.");
    } else if (secret !== WS_SHARED_SECRET) {
      console.warn("⚠️ ALLOW_INSECURE is true but secret provided does not match. Accepting connection for testing.");
    } else {
      console.log("✅ Secret matched (ALLOW_INSECURE true). Accepting.");
    }
  }

  console.log("✅ Authorized (or bypassed) WebSocket connected.");
  attachGoogleStream(ws);
});

server.listen(APP_PORT, () => {
  console.log(`✅ Server running on port ${APP_PORT}`);
  console.log(`🌐 NGROK_HOST from .env: ${NGROK_HOST}`);
});