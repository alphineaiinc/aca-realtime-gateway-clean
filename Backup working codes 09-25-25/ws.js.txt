// ws.js - Twilio → Google Speech bridge (using official @google-cloud/speech client)

require("dotenv").config();
const speech = require("@google-cloud/speech");

// Create Google Speech client (uses GOOGLE_APPLICATION_CREDENTIALS from .env)
const client = new speech.SpeechClient();

function attachGoogleStream(connection) {
  console.log("🎤 Setting up Google STT stream...");

  // Configure recognition
  const request = {
    config: {
      encoding: "MULAW",          // Twilio streams μ-law PCM
      sampleRateHertz: 8000,      // Twilio default 8kHz
      languageCode: "en-US",      // Change if needed
    },
    interimResults: true,         // Get partial results
  };

  // Create streaming recognize stream
  const recognizeStream = client
    .streamingRecognize(request)
    .on("data", (data) => {
      const transcript = data.results?.[0]?.alternatives?.[0]?.transcript;
      if (transcript) {
        const isFinal = data.results?.[0]?.isFinal;
        console.log(`📝 Transcript${isFinal ? " (final)" : ""}: ${transcript}`);
      }
    })
    .on("error", (err) => {
      console.error("Google STT error:", err);
    })
    .on("end", () => {
      console.log("Google stream ended.");
    });

  // Handle Twilio WebSocket events
  connection.on("message", (msg) => {
    try {
      const data = JSON.parse(msg.toString());

      if (data.event === "media" && data.media?.payload) {
        const audioChunk = Buffer.from(data.media.payload, "base64");
        console.log(`➡️ Sending audio chunk (${audioChunk.length} bytes)`);
        recognizeStream.write(audioChunk);
      } else if (data.event === "start") {
        console.log("Twilio stream started:", data.start);
      } else if (data.event === "stop") {
        console.log("Twilio stream stopped.");
        recognizeStream.end();
      } else {
        console.log(`ℹ️ Ignored Twilio event: ${data.event}`);
      }
    } catch (e) {
      console.error("WS parse error:", e);
    }
  });

  connection.on("close", () => {
    console.log("❌ WS closed, ending Google stream.");
    recognizeStream.end();
  });

  connection.on("error", (err) => {
    console.error("WebSocket error:", err);
    recognizeStream.end();
  });
}

module.exports = { attachGoogleStream };
